import{onCleanup as t,createEffect as e}from"solid-js";var n={dragStart:!0},r=(t,e={})=>{let r,u,{bounds:f,axis:g="both",gpuAcceleration:h=!0,legacyTranslate:p=!0,transform:m,applyUserSelectHack:y=!0,disabled:b=!1,ignoreMultitouch:w=!1,recomputeBounds:v=n,grid:x,position:E,cancel:A,handle:S,touchAction:C="none",defaultClass:N="neodrag",defaultClassDragging:D="neodrag-dragging",defaultClassDragged:M="neodrag-dragged",defaultPosition:B={x:0,y:0},onDragStart:$,onDrag:R,onDragEnd:H}=e,L=!1,P=0,T=0,X=0,Y=0,q=0,j=0,{x:k,y:U}=E?{x:E?.x??0,y:E?.y??0}:B;V(k,U);let W,z,F,G,I,J="",K=!!E;v={...n,...v};const O=document.body.style,Q=t.classList;function V(e=P,n=T){if(!m){if(p){let r=`${+e}px, ${+n}px`;return l(t,"transform",h?`translate3d(${r}, 0)`:`translate(${r})`)}return l(t,"translate",`${+e}px ${+n}px ${h?"1px":""}`)}const r=m({offsetX:e,offsetY:n,rootNode:t});i(r)&&l(t,"transform",r)}const Z=(e,n)=>{const r={offsetX:P,offsetY:T,rootNode:t,currentNode:I};t.dispatchEvent(new CustomEvent(e,{detail:r})),n?.(r)};const _=addEventListener;_("pointerdown",et,!1),_("pointerup",nt,!1),_("touchend",nt,!1),_("pointermove",rt,!1),l(t,"touch-action",C);const tt=()=>{let e=t.offsetWidth/z.width;return isNaN(e)&&(e=1),e};function et(e){if(b)return;if(2===e.button)return;if(w&&!e.isPrimary)return;if(v.dragStart&&(W=d(f,t)),i(S)&&i(A)&&S===A)throw new Error("`handle` selector can't be same as `cancel` selector");if(Q.add(N),F=function(t,e){if(!t)return[e];if(c(t))return[t];if(Array.isArray(t))return t;const n=e.querySelectorAll(t);if(null===n)throw new Error("Selector passed for `handle` option should be child of the element on which the action is applied");return Array.from(n.values())}(S,t),G=function(t,e){if(!t)return[];if(c(t))return[t];if(Array.isArray(t))return t;const n=e.querySelectorAll(t);if(null===n)throw new Error("Selector passed for `cancel` option should be child of the element on which the action is applied");return Array.from(n.values())}(A,t),r=/(both|x)/.test(g),u=/(both|y)/.test(g),s(G,F))throw new Error("Element being dragged can't be a child of the element on which `cancel` is applied");const n=e.composedPath()[0];if(!F.some((t=>t.contains(n)||t.shadowRoot?.contains(n)))||s(G,[n]))return;I=1===F.length?t:F.find((t=>t.contains(n))),L=!0,z=t.getBoundingClientRect(),y&&(J=O.userSelect,O.userSelect="none"),Z("neodrag:start",$);const{clientX:o,clientY:a}=e,l=tt();r&&(X=o-k/l),u&&(Y=a-U/l),W&&(q=o-z.left,j=a-z.top)}function nt(){L&&(v.dragEnd&&(W=d(f,t)),Q.remove(D),Q.add(M),y&&(O.userSelect=J),Z("neodrag:end",H),r&&(X=P),u&&(Y=T),L=!1)}function rt(e){if(!L)return;v.drag&&(W=d(f,t)),Q.add(D),e.preventDefault(),z=t.getBoundingClientRect();let n=e.clientX,i=e.clientY;const s=tt();if(W){const t={left:W.left+q,top:W.top+j,right:W.right+q-z.width,bottom:W.bottom+j-z.height};n=o(n,t.left,t.right),i=o(i,t.top,t.bottom)}if(Array.isArray(x)){let[t,e]=x;if(isNaN(+t)||t<0)throw new Error("1st argument of `grid` must be a valid positive number");if(isNaN(+e)||e<0)throw new Error("2nd argument of `grid` must be a valid positive number");let r=n-X,o=i-Y;[r,o]=a([t/s,e/s],r,o),n=X+r,i=Y+o}r&&(P=Math.round((n-X)*s)),u&&(T=Math.round((i-Y)*s)),k=P,U=T,Z("neodrag",R),V()}return{destroy:()=>{const t=removeEventListener;t("pointerdown",et,!1),t("pointerup",nt,!1),t("pointermove",rt,!1)},update:t=>{g=t.axis||"both",b=t.disabled??!1,w=t.ignoreMultitouch??!1,S=t.handle,f=t.bounds,v=t.recomputeBounds??n,A=t.cancel,y=t.applyUserSelectHack??!0,x=t.grid,h=t.gpuAcceleration??!0,p=t.legacyTranslate??!0,m=t.transform;const e=Q.contains(M);Q.remove(N,M),N=t.defaultClass??"neodrag",D=t.defaultClassDragging??"neodrag-dragging",M=t.defaultClassDragged??"neodrag-dragged",Q.add(N),e&&Q.add(M),K&&(k=P=t.position?.x??P,U=T=t.position?.y??T,V())}}},o=(t,e,n)=>Math.min(Math.max(t,e),n),i=t=>"string"==typeof t,a=([t,e],n,r)=>{const o=(t,e)=>0===e?0:Math.ceil(t/e)*e;return[o(n,t),o(r,e)]};var s=(t,e)=>t.some((t=>e.some((e=>t.contains(e)))));function d(t,e){if(void 0===t)return;if(c(t))return t.getBoundingClientRect();if("object"==typeof t){const{top:e=0,left:n=0,right:r=0,bottom:o=0}=t;return{top:e,right:window.innerWidth-r,bottom:window.innerHeight-o,left:n}}if("parent"===t)return e.parentNode.getBoundingClientRect();const n=document.querySelector(t);if(null===n)throw new Error("The selector provided for bound doesn't exists in the document.");return n.getBoundingClientRect()}var l=(t,e,n)=>t.style.setProperty(e,n),c=t=>t instanceof HTMLElement,u=()=>({draggable:(n,o)=>{const{update:i,destroy:a}=r(n,o());t(a),e((()=>i(o())))}});export{u as createDraggable};